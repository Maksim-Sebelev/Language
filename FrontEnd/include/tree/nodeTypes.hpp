#ifndef NODE_TYPES_HPP
#define NODE_TYPES_HPP


#define STRLEN(str) sizeof(str) - 1 // '-1' to avoid counting \0

//================== Default math (or already another?) operations ===================================================================================================================

enum class Operation
{
    undefined_operation,
    plus               , 
    minus              ,
    mul                , 
    dive               ,
    power              ,
    assign             ,
    greater            ,
    greater_or_equal   ,
    less               ,
    less_or_equal      ,
    equal              ,
    not_equal          ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultOperation
{
    const char* name;
    size_t      len;
    Operation   value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define PLUS             "*"
#define MINUS            "-"
#define MUL              "*"
#define DIV              "/"
#define POWER            "^"
#define ASSIGN           "="
#define GREATER          ">"
#define GREATER_OR_EQUAL ">="
#define LESS             "<"
#define LESS_OR_EQUAL    "<="
#define EQUAL            "=="
#define NOT_EQUAL        "!="

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultOperation DefaultOperations[] =
{
    {PLUS            , STRLEN(PLUS)            , Operation::plus             },
    {MINUS           , STRLEN(MINUS)           , Operation::minus            },
    {MUL             , STRLEN(MUL)             , Operation::mul              },
    {DIV             , STRLEN(DIV)             , Operation::dive             },
    {POWER           , STRLEN(POWER)           , Operation::power            },
    {ASSIGN          , STRLEN(ASSIGN)          , Operation::assign           },
    {GREATER         , STRLEN(GREATER)         , Operation::greater          },
    {GREATER_OR_EQUAL, STRLEN(GREATER_OR_EQUAL), Operation::greater_or_equal },
    {LESS            , STRLEN(LESS)            , Operation::less             },
    {LESS_OR_EQUAL   , STRLEN(LESS_OR_EQUAL)   , Operation::less_or_equal    },
    {EQUAL           , STRLEN(EQUAL)           , Operation::equal            },
    {NOT_EQUAL       , STRLEN(NOT_EQUAL)       , Operation::not_equal        },
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultOperationsQuant = sizeof(DefaultOperations) / sizeof(DefaultOperations[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef PLUS
#undef MINUS
#undef MUL
#undef DIV
#undef POWER
#undef ASSIGN
#undef GREATER
#undef GREATER_OR_EQUAL
#undef LESS
#undef LESS_OR_EQUAL
#undef EQUAL
#undef NOT_EQUAL

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//==================== Default functions ==================================================================================================================================

// enum class DFunction
// {
//     undefined_function,
//     Sqrt              ,
//     Ln                ,
//     Sin               ,
//     Cos               ,
//     Tg                ,
//     Ctg               ,
//     Arcsin            ,
//     Arccos            ,
//     Arctg             ,
//     Arcctg            ,
//     Sh                ,
//     Ch                ,
//     Th                ,
//     Cth               ,
// };

// //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// struct DefaultFunction
// {
//     const char* name;
//     DFunction    value;
// };

// //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// const static DefaultFunction DefaultFunctions[] =
// {
//     {"sqrt"  , DFunction::Sqrt  },
//     {"ln"    , DFunction::Ln    },
//     {"sin"   , DFunction::Sin   },
//     {"cos"   , DFunction::Cos   },
//     {"tg"    , DFunction::Tg    },
//     {"ctg"   , DFunction::Ctg   },
//     {"sh"    , DFunction::Sh    },
//     {"ch"    , DFunction::Ch    },
//     {"th"    , DFunction::Th    },
//     {"cth"   , DFunction::Cth   },
//     {"arcsin", DFunction::Arcsin},
//     {"arccos", DFunction::Arccos},
//     {"arctg" , DFunction::Arctg },
//     {"arcctg", DFunction::Arcctg},
// };

// //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// const size_t DefaultFunctionsQuant = sizeof(DefaultFunctions) / sizeof(DefaultFunctions[0]);

// //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//=============== Type of variables and functions returns ============================================================================================================================

enum class Type
{
    undefined_type,
    int_t         ,
    char_t        ,
    double_t      ,
    void_t        ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultType
{
    const char* name;
    size_t      len;
    Type        value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define INT     "int"
#define CHAR    "char"
#define DOUBLE  "double"
#define VOID    "void"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultType DefaultTypes[] =
{
    {INT    , STRLEN(INT)   , Type::int_t   },
    {CHAR   , STRLEN(CHAR)  , Type::char_t  },
    {DOUBLE , STRLEN(DOUBLE), Type::double_t},
    {VOID   , STRLEN(VOID)  , Type::void_t  },
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultTypesQuant = sizeof(DefaultTypes) / sizeof(DefaultTypes[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

union Number
{
    char   char_val;
    int    int_val;
    double double_val;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef INT
#undef CHAR
#undef DOUBLE
#undef VOID

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//=============== If-elif-else ============================================================================================================================

enum class Condition
{
    undefined_condition,
    if_t               ,
    else_if_t          ,
    else_t             ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultCondition
{
    const char* name;
    size_t      len;
    Condition   value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define IF      "if"
#define ELSE_IF "else if"
#define ELSE    "else"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultCondition DefauConditions[] =
{
    {IF     , STRLEN(IF)     , Condition::if_t     },
    {ELSE_IF, STRLEN(ELSE_IF), Condition::else_if_t},
    {ELSE   , STRLEN(ELSE)   , Condition::else_t   },
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefauConditionsQuant = sizeof(DefauConditions) / sizeof(DefauConditions[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef IF
#undef ELSE_IF
#undef ELSE

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//================ Cycles =================================================================================================================================

enum class Cycle
{
    undefined_cycle,
    for_t          ,
    while_t        ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultCycle
{
    const char* name;
    size_t      len;
    Cycle       value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define FOR   "for"
#define WHILE "while"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultCycle DefaultCycles[]
{
    {FOR   , STRLEN(FOR)  , Cycle::for_t  },
    {WHILE , STRLEN(WHILE), Cycle::while_t},
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultCyclesQuant = sizeof(DefaultCycles) / sizeof(DefaultCycles[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef FOR
#undef WHILE

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//================ Empty node to connect all another nodes =================================================================================================================================

typedef uint8_t Connect;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef STRLEN

#endif // NODE_TYPES_HPP
