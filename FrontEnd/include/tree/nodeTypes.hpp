#ifndef NODE_TYPES_HPP
#define NODE_TYPES_HPP

//================== Default math (or already another?) operations ===================================================================================================================

enum class Operation
{
    undefined_operation,
    plus               , 
    minus              ,
    mul                , 
    dive               ,
    power              ,
    assign             ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultOperation
{
    const char* name;
    Operation   value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultOperation const DefaultOperations[] =
{
    {"+", Operation::plus  },
    {"-", Operation::minus },
    {"*", Operation::mul   },
    {"/", Operation::dive  },
    {"^", Operation::power },
    {"=", Operation::assign},
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultOperationsQuant = sizeof(DefaultOperations) / sizeof(DefaultOperations[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//==================== Default functions ==================================================================================================================================

enum class DFunction
{
    undefined_function,
    Sqrt              ,
    Ln                ,
    Sin               ,
    Cos               ,
    Tg                ,
    Ctg               ,
    Arcsin            ,
    Arccos            ,
    Arctg             ,
    Arcctg            ,
    Sh                ,
    Ch                ,
    Th                ,
    Cth               ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultFunction
{
    const char* name;
    DFunction    value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultFunction const DefaultFunctions[] =
{
    {"sqrt"  , DFunction::Sqrt  },
    {"ln"    , DFunction::Ln    },
    {"sin"   , DFunction::Sin   },
    {"cos"   , DFunction::Cos   },
    {"tg"    , DFunction::Tg    },
    {"ctg"   , DFunction::Ctg   },
    {"sh"    , DFunction::Sh    },
    {"ch"    , DFunction::Ch    },
    {"th"    , DFunction::Th    },
    {"cth"   , DFunction::Cth   },
    {"arcsin", DFunction::Arcsin},
    {"arccos", DFunction::Arccos},
    {"arctg" , DFunction::Arctg },
    {"arcctg", DFunction::Arcctg},
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultFunctionsQuant = sizeof(DefaultFunctions) / sizeof(DefaultFunctions[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



//=============== Type of variables and functions returns ============================================================================================================================

enum class Type
{
    undefined_type,
    int_t         ,
    char_t        ,
    double_t      ,
    void_t        ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultType
{
    const char* name;
    Type        value;
};

const static DefaultType const DefaultTypes[] =
{
    {"int"    , Type::int_t   },
    {"char"   , Type::char_t  },
    {"double" , Type::double_t},
    {"void"   , Type::void_t  },
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultTypesQuant = sizeof(DefaultTypes) / sizeof(DefaultTypes[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

union Number
{
    char   char_val;
    int    int_val;
    double double_val;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//=============== If-elif-else ============================================================================================================================

enum class Condition
{
    undefined_condition,
    if_t               ,
    else_if_t          ,
    else_t             ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultCondition
{
    const char* name;
    Condition   value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultCondition const DefauConditions[] =
{
    {"if"     , Condition::if_t     },
    {"else if", Condition::else_if_t},
    {"else"   , Condition::else_t   },
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefauConditionsQuant = sizeof(DefauConditions) / sizeof(DefauConditions[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//================ Cycles =================================================================================================================================

enum class Cycle
{
    undefined_cycle,
    for_t          ,
    while_t        ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultCycle
{
    const char* name;
    Cycle       value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultCycle const DefaultCycles[]
{
    {"for"   , Cycle::for_t  },
    {"while" , Cycle::while_t},
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultCyclesQuant = sizeof(DefaultCycles) / sizeof(DefaultCycles[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//================ Empty node to connect all anothet =================================================================================================================================

typedef uint8_t Connect;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#endif // NODE_TYPES_HPP
