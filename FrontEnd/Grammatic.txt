Tree          ::= Condition '\0'
Condition     ::= { ConditionIf ConditionElif ConditionElse | Assign ';' | Cycle }*
ConditionIf   ::= 'if' '(' BoolOperation ')' '{' Condition '}'
ConditionElif ::= { 'else if' '(' BoolOperation ')' '{' Condition '}' }*
ConditionElse ::= else '{' Condition '}'
Cycle         ::= While | For
While         ::= 'while' '(' BoolOperation ')' '{' ConditionIf '}'
For           ::= 'for' '(' Assign ';' BoolOperation ';' Assign ')' '{' ConditionIf '}'
Assign        ::= Type ? Variable '=' BoolOperation
BoolOperation ::= AddSub { ['>' '>=' ... '==' '!=' '&&' '||'] AddSub } *
AddSub        ::= MulDiv { ['+' '-'] MulDiv } *
MulDiv        ::= Pow { ['*' '/'] Pow } *
Pow           ::= Not { '^' Not } *
Not           ::= {'!' Minus}  | Minus
Minus         ::= '-' MulDiv | Bracket 
Bracket       ::= '(' BoolOperation ')' | Variable | Number
Variable      ::= [letter] { [letter | number] } *
Number        ::= ['0' - '9'] +
Type          ::= {'int' 'double' 'char ' 'void'}
