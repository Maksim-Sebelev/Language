#define _DEBUG

#include <stdio.h>
#include <assert.h>
#include "lib/lib.hpp"
#include "tree/tree.hpp"
#include "tree/fprintfTree/fprintfTree.hpp"

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#ifdef _DEBUG
#include "log/log.hpp"
#endif

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void RecursivePrintNode(const Node_t* node ON_DEBUG(, size_t nTabBeore));

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ON_DEBUG(

static void PrintNTab(FILE* outstream, size_t nTab);

)

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

void PrintTree(const Tree_t* tree, const char* outstream)
{
    assert(tree);
    assert(outstream);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void RecursivePrintNode(FILE* outstream, const Node_t* node ON_DEBUG(, size_t nTabBefore))
{
    assert(node);
    assert(outstream);
    
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void PrintNode(FILE* outstream, const Node_t* node ON_DEBUG(, size_t nTabBefore))
{
    assert(node);
    assert(outstream);

    NodeArgType type = node->type;

    switch (type)
    {
        case NodeArgType::initialisation:
        case NodeArgType::name:    
        case NodeArgType::number:
        case NodeArgType::condition:
        case NodeArgType::undefined:
        default: assert(0 && "undef node type"); exit(1);
    }

}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void PrintInit(FILE* outstream, const Node_t* node ON_DEBUG(, size_t nTabBefore))
{
    assert(node);
    assert(outstream);

    ON_DEBUG(
    PrintNTab(outstream, nTabBefore);
    )
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void PrintName(FILE* outstream, const Node_t* node ON_DEBUG(, size_t nTabBefore))
{
    assert(node);
    assert(outstream);

    ON_DEBUG(
    PrintNTab(outstream, nTabBefore);
    )

    const char* name = node->data.name.name.name;

    fprintf(outstream, "\"%s\"", name);

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ON_DEBUG(

static void PrintNTab(FILE* outstream, size_t nTab)
{
    assert(outstream);
    for (size_t i = 0; i < nTab; i++)
    {
        fprintf(outstream, "\t");
    }
    return;
}

)

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
