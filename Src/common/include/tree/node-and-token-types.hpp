#ifndef NODE_AND_TOKENS_TYPES_HPP
#define NODE_AND_TOKENS_TYPES_HPP

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#include <stddef.h>
#include <stdint.h>

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*


    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    if (strlen(word1) > strlen(word2))
    {
        wordsArr
        {
            ...             NOT    ...
            word1,          NOT    word2
            ...             NOT    ...
            word2,          NOT    word1
            ...             NOT    ...
        }
    }
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/


//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct NameInfo
{
    const char* name;
    size_t      len;
};

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define STRLEN(str) sizeof(str) - 1 // '-1' to avoid counting \0

//================== Default math (or already another?) operations ===================================================================================================================

enum class Operation
{
    undefined_operation,
    plus               , 
    minus              ,
    mul                , 
    dive               ,
    power              ,
    assign             ,
    greater            ,
    greater_or_equal   ,
    less               ,
    less_or_equal      ,
    equal              ,
    not_equal          ,
    bool_and           ,
    bool_or            ,
    bool_not           ,
    plus_equal         ,
    minus_equal        ,
    mul_equal          ,
    div_equal          ,
    plus_plus          ,
    minus_minus        ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultOperation
{
    NameInfo    nameInfo;
    Operation   value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define NOT              "not"
#define AND              "and"
#define OR               "or"
#define GREATER_OR_EQUAL ">="
#define LESS_OR_EQUAL    "<="
#define EQUAL            "=="
#define NOT_EQUAL        "!="
#define PLUS_EQUAL       "+="
#define MINUS_EQUAL      "+="
#define PLUS_PLUS        "++"
#define MINUS_MINUS      "--"
#define MUL_EQUAL        "*="
#define DIV_EQUAL        "/="
#define PLUS             "+"
#define MINUS            "-"
#define MUL              "*"
#define DIV              "/"
#define POWER            "^"
#define ASSIGN           "="
#define GREATER          ">"
#define LESS             "<"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultOperation DefaultOperations[] =
{
    {NOT             , STRLEN(NOT)             , Operation::bool_not         },    // name len = 3
    {AND             , STRLEN(AND)             , Operation::bool_and         },

    {OR              , STRLEN(OR)              , Operation::bool_or          },     // name len = 2
    {GREATER_OR_EQUAL, STRLEN(GREATER_OR_EQUAL), Operation::greater_or_equal },
    {LESS_OR_EQUAL   , STRLEN(LESS_OR_EQUAL)   , Operation::less_or_equal    },
    {EQUAL           , STRLEN(EQUAL)           , Operation::equal            },
    {NOT_EQUAL       , STRLEN(NOT_EQUAL)       , Operation::not_equal        },
    {PLUS_EQUAL      , STRLEN(PLUS_EQUAL)      , Operation::plus_equal       },
    {MINUS_EQUAL     , STRLEN(MINUS_EQUAL)     , Operation::minus_equal      },
    {MUL_EQUAL       , STRLEN(MUL_EQUAL)       , Operation::mul_equal        },
    {DIV_EQUAL       , STRLEN(DIV_EQUAL)       , Operation::div_equal        },
    {PLUS_PLUS       , STRLEN(PLUS_PLUS)       , Operation::plus_plus        },
    {MINUS_MINUS     , STRLEN(MINUS_MINUS)     , Operation::minus_minus      },
    
    {PLUS            , STRLEN(PLUS)            , Operation::plus             },
    {MINUS           , STRLEN(MINUS)           , Operation::minus            },  // name len = 1
    {MUL             , STRLEN(MUL)             , Operation::mul              },
    {DIV             , STRLEN(DIV)             , Operation::dive             },
    {POWER           , STRLEN(POWER)           , Operation::power            },
    {ASSIGN          , STRLEN(ASSIGN)          , Operation::assign           },
    {GREATER         , STRLEN(GREATER)         , Operation::greater          },
    {LESS            , STRLEN(LESS)            , Operation::less             },
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultOperationsQuant = sizeof(DefaultOperations) / sizeof(DefaultOperations[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef PLUS
#undef MINUS
#undef MUL
#undef DIV
#undef POWER
#undef ASSIGN
#undef GREATER
#undef GREATER_OR_EQUAL
#undef LESS
#undef LESS_OR_EQUAL
#undef EQUAL
#undef NOT_EQUAL

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//==================== Default functions ==================================================================================================================================

enum class DFunction
{
    undefined_function,
    print             ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultFunction
{
    NameInfo   nameInfo;
    DFunction   value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define PRINT "print"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultFunction DefaultFunctions[] =
{
    {PRINT, STRLEN(PRINT), DFunction::print},
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultFunctionsQuant = sizeof(DefaultFunctions) / sizeof(DefaultFunctions[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

typedef NameInfo StringLiteral;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//=============== Type of variables and functions returns ============================================================================================================================

enum class Type
{
    undefined_type,
    int_type      ,
    char_type     ,
    double_type   ,
    void_type     ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultType
{
    NameInfo nameInfo;
    Type     value;
    size_t   size;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define INT     "int"
#define CHAR    "char"
#define DOUBLE  "double"
#define VOID    "void"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultType DefaultTypes[] =
{
    {INT    , STRLEN(INT)   , Type::int_type   , 4},
    {CHAR   , STRLEN(CHAR)  , Type::char_type  , 1},
    {DOUBLE , STRLEN(DOUBLE), Type::double_type, 8},
    {VOID   , STRLEN(VOID)  , Type::void_type  , 0},
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultTypesQuant = sizeof(DefaultTypes) / sizeof(DefaultTypes[0]);

#undef INT
#undef CHAR
#undef DOUBLE
#undef VOID

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

union NumberValue
{
    char   char_val;
    int    int_val;
    double double_val;
};

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct Number
{
    Type        type;
    NumberValue value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//=============== If-elif-else ============================================================================================================================

enum class Condition
{
    undefined_condition,
    if_t               ,
    else_if_t          ,
    else_t             ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultCondition
{
    NameInfo nameInfo;
    Condition   value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define IF      "if"
#define ELSE_IF "else if"
#define ELSE    "else"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultCondition DefaultConditions[] =
{
    {IF     , STRLEN(IF)     , Condition::if_t     },
    {ELSE_IF, STRLEN(ELSE_IF), Condition::else_if_t},
    {ELSE   , STRLEN(ELSE)   , Condition::else_t   },
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultConditionsQuant = sizeof(DefaultConditions) / sizeof(DefaultConditions[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef IF
#undef ELSE_IF
#undef ELSE

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//================ Cycles =================================================================================================================================

enum class Cycle
{
    undefined_cycle,
    for_t          ,
    while_t        ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultCycle
{
    NameInfo nameInfo;
    Cycle       value;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define FOR   "for"
#define WHILE "while"

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const static DefaultCycle DefaultCycles[]
{
    {FOR   , STRLEN(FOR)  , Cycle::for_t  },
    {WHILE , STRLEN(WHILE), Cycle::while_t},
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const size_t DefaultCyclesQuant = sizeof(DefaultCycles) / sizeof(DefaultCycles[0]);

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef FOR
#undef WHILE

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//================ Empty node to connect all another nodes =================================================================================================================================

typedef uint8_t Connect;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//=========== TOKENS ======================================================================================================================================================================================================================
//=========== TOKENS ======================================================================================================================================================================================================================
//=========== TOKENS ======================================================================================================================================================================================================================
//=========== TOKENS ======================================================================================================================================================================================================================
//=========== TOKENS ======================================================================================================================================================================================================================
//=========== TOKENS ======================================================================================================================================================================================================================
//=========== TOKENS ======================================================================================================================================================================================================================
//=========== TOKENS ======================================================================================================================================================================================================================

//============== Brackets =================================================================================================================================================================================================================

enum class Bracket
{
    undefined_bracket,
    left_round       ,
    left_curly       ,
    left_square      ,
    right_round      ,
    right_curly      ,
    right_square     ,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultBracket
{
    NameInfo nameInfo;
    Bracket     value;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define LEFT_ROUND   "("
#define LEFT_COURLY  "{"
#define LEFT_SQUARE  "["
#define RIGHT_ROUND  ")"
#define RIGHT_COURLY "}"
#define RIGHT_SQUARE "]"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const DefaultBracket DefaultBrackets[] =
{
    {LEFT_ROUND,   STRLEN(LEFT_ROUND  ), Bracket::left_round},
    {LEFT_COURLY,  STRLEN(LEFT_COURLY ), Bracket::left_curly},
    {LEFT_SQUARE,  STRLEN(LEFT_SQUARE ), Bracket::left_square},
    {RIGHT_ROUND,  STRLEN(RIGHT_ROUND ), Bracket::right_round},
    {RIGHT_COURLY, STRLEN(RIGHT_COURLY), Bracket::right_curly},
    {RIGHT_SQUARE, STRLEN(RIGHT_SQUARE), Bracket::right_square},
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const size_t DefaultBracketsQuant = sizeof(DefaultBrackets) / sizeof(DefaultBrackets[0]);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef LEFT_ROUND
#undef LEFT_COURLY
#undef LEFT_SQUARE
#undef RIGHT_ROUND
#undef RIGHT_COURLY
#undef RIGHT_SQUARE

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// =============== Separators ==============================================================================================================================================================================================================

enum class Separator
{
    undefined_separator,
    comma              ,
    point              ,
    colon              ,
    semicolon          ,
    quotation_marks    ,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultSeparator
{
    NameInfo nameInfo;
    Separator   value;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define SEMICOLON ";"
#define COMMA     ","
#define POINT     "."
#define COLON     ":"
#define QUOT_MARK "\""

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const DefaultSeparator DefaultSeparators[] =
{
    {SEMICOLON, STRLEN(SEMICOLON), Separator::semicolon       },
    {COMMA    , STRLEN(COMMA)    , Separator::comma           },
    {POINT    , STRLEN(POINT)    , Separator::point           },
    {COLON    , STRLEN(COLON)    , Separator::colon           },
    {QUOT_MARK, STRLEN(QUOT_MARK), Separator::quotation_marks },
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const size_t DefaultSeparatorsQuant = sizeof(DefaultSeparators) / sizeof(DefaultSeparators[0]);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef COMMA
#undef POINT
#undef COLON
#undef SEMICOLON

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//============ end symbols (the last symbol/word in code in file with programm) ===========================================================================================================================================================

enum EndSymbol : char
{
    end  = '$',
    endd = '\0',
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


//================== Names =============================================================================================================================================================


enum class NameType
{
    undefined_name_type,
    variable           ,
    function           ,
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct Function
{
    Type type;
};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

typedef Number Variable;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

union NameData
{
    Function function;
    Variable variable;
};

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct Name
{
    size_t   ram_id;

    NameInfo name;
    NameType type;
    NameData data;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ============== Commets =================================================================================================================================================================================================================

typedef NameInfo OneLineComment;

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define COMMENT_1 "#"
#define COMMENT_2 "//"
#define COMMENT_3 "@"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const OneLineComment OneLineComments[] = 
{
    {COMMENT_1, STRLEN(COMMENT_1)},
    {COMMENT_2, STRLEN(COMMENT_2)},
    {COMMENT_3, STRLEN(COMMENT_3)},
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const size_t OneLineCommentsQuant = sizeof(OneLineComments) / sizeof(OneLineComments[0]);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//=============== function attribute ===================================================================================================================================================================================================================

enum class FunctionAttribute
{
    undefined_attribute,
    ret,
    call,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

struct DefaultFunctionAttribute
{
    NameInfo          nameInfo;
    FunctionAttribute value;
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define RETURN "return"
#define CALL   "call"

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const DefaultFunctionAttribute DefaultFunctionsAttributes[] =
{
    {RETURN, STRLEN(RETURN), FunctionAttribute::ret },
    {CALL  , STRLEN(CALL)  , FunctionAttribute::call},
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static const size_t DefaultFunctionAttributesQuant = sizeof(DefaultFunctionsAttributes) / sizeof(DefaultFunctionsAttributes[0]);

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//=============== Initialisation (def variable, func) (only for nodes, NOT for tokens) =======================================================================================================================================================================================================

enum class Initialisation
{
    undefined_initialisation,
    def_function            ,
    def_variable            ,
    assign_variable         ,
    call_function           ,
    call_default_function   ,
    get_variable            ,
};

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#undef STRLEN
#endif // NODE_AND_TOKENS_TYPES_HPP
