#define WORD_ARRAY_POINTER         // for struct WordArray in read-file/read-file.hpp
#define WORD_SAVE_INPUT_STREAM     // for struct WordArray in read-file/read-file.hpp

#include <string.h>
#include <assert.h>
#include "tree/tree.hpp"
#include "tree/read-write-tree/read-tree/read-tree.hpp"
#include "tree/read-write-tree/read-write-tree-global/read-write-tree-global.hpp"

#include "read-file/read-file.hpp"

#ifdef _DEBUG
#include "tree/tree-dump/tree-dump.hpp"
#include "log/log.hpp"
#endif // _DEBUG

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

const char* const bad_signature_massage = "Bad signature. Possible reason - that incorrect tree text format for this compiler.";

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void CheckSignature        (WordArray* word_array);
static void CheckSignatureBegin   (WordArray* word_array);
static void CheckSignatureName    (WordArray* word_array);
static void CheckSignatureAutor   (WordArray* word_array);
static void CheckSignatureVersion (WordArray* word_array);

static void CheckSignatureHelper  (WordArray* word_array, const char* correct);


static Type GetType               (const Word* word);

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Tree_t ReadTree(WordArray* word_array)
{
    assert(word_array);

    CheckSignature(word_array);

    Tree_t tree = {};



    return tree;
}


//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static Tree_t GetTree(WordArray* word_array)
{
    assert(word_array);

    return {};
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static Node_t* GetDefFuncNode(WordArray* word_array)
{
    assert(word_array);

    
    Word word = ConsumeWord(word_array);
    if (!IsWordDefFunc(word.word))
    return nullptr;
    
    
    Node_t* type_node = GetTypeNode(word_array);

    Node_t* def_func_node = {};

    return def_func_node;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static Node_t* GetTypeNode(WordArray* word_array)
{
    assert(word_array);

    Word word = word_array->words[word_array->pointer];

    Type type = GetType(&word);

    Node_t* node = {};
    _TYPE(&node, type, nullptr);

    return node;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void CheckSignature(WordArray* word_array)
{
    assert(word_array);

    CheckSignatureBegin   (word_array);
    CheckSignatureName    (word_array);
    CheckSignatureAutor   (word_array);
    CheckSignatureVersion (word_array);

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void CheckSignatureBegin(WordArray* word_array)
{
    assert(word_array);

    CheckSignatureHelper(word_array, ast_file_signature);

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void CheckSignatureName(WordArray* word_array)
{
    assert(word_array);

    CheckSignatureHelper(word_array, ast_file_signature_name);

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void CheckSignatureAutor(WordArray* word_array)
{
    assert(word_array);

    CheckSignatureHelper(word_array, ast_file_signature_autor);

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void CheckSignatureVersion(WordArray* word_array)
{
    assert(word_array);

    CheckSignatureHelper(word_array, ast_file_signature_version);

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void CheckSignatureHelper(WordArray* word_array, const char* correct)
{
    assert(word_array);
    assert(correct);

    Word word = word_array->words[word_array->pointer];

    if (strcmp(word.word, correct) != 0)
    {
        EXIT(EXIT_FAILURE,  "%s\n"
                            "'%s' - here must be '%s'\n"
                            "%s:%lu:%lu\n",
                            bad_signature_massage, 
                            word.word, correct,
                            word_array->input_stream, word.line, word.inLine
            );
    }

    word_array->pointer++;

    return;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static Type GetType(const Word* word)
{
    assert(word);

    const char* word_str = word->word;

    assert(word_str);

    for (size_t type_i = 0; type_i < DefaultTypesQuant; type_i++)
    {
        DefaultType type = DefaultTypes[type_i];
        
        bool flag = strcmp(word_str, type.nameInfo.name);
        RETURN_IF_TRUE(flag, type.value);
    }

    return Type::undefined_type;
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Word ConsumeWord(WordArray* word_array)
{
    assert(word_array);

    word_array->pointer++;

    return word_array->words[word_array->pointer - 1];
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Word PickWord(WordArray* word_array)
{
    assert(word_array);

    return word_array->words[word_array->pointer];
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static bool IsWordDefFunc(const char* word)
{
    assert(word);
    return (strcmp(word, def_func) == 0);
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static bool IsWordDefVariable(const char* word)
{
    assert(word);
    return (strcmp(word, define_variable) == 0);
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static bool IsWordCallFunc(const char* word)
{
    assert(word);
    return (strcmp(word, call_function) == 0);
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static bool IsWordAssign(const char* word)
{
    assert(word);
    return (strcmp(word, assign) == 0);
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

static bool IsWordType(const char* word)
{
    assert(word);
    return (strcmp(word, type) == 0);
}

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
